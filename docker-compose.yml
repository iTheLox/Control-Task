services:
  db:
    image: mysql:8.0-debian
    container_name: task_db_mysql
    restart: always
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - task_data:/var/lib/mysql
      - ./backups/mysql:/backups
    ports:
      - "3307:3306"
    networks:
      - internal_net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  redis:
    image: redis:7-alpine
    container_name: task_redis
    restart: always
    networks:
      - internal_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  backend:
    build: .
    container_name: task_backend_fastapi
    restart: always
    env_file:
      - .env
    ports:
      - "${BACKEND_PORT}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["/bin/bash", "-c", "sleep 20 && uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4"]
    networks:
      - internal_net
    healthcheck:
      test: ["CMD", "python3", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health').read()"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 45s

  celery_worker:
    build: .
    container_name: task_celery_worker
    command: celery -A app.celery_worker.celery worker --loglevel=info --concurrency=4
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - internal_net

volumes:
  task_data:

networks:
  internal_net:
    driver: bridge
